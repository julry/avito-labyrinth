import styled from "styled-components";
import { useMemo } from "react";
import { FlexWrapper } from "../shared/ContentWrapper";
import { IconButton } from "../shared/Button";
import { useProgress } from "../../contexts/ProgressContext";
import { NewAchieveModal } from "../shared/modals";
import { SCREENS } from "../../constants/screens";

const Wrapper = styled(FlexWrapper)`
    padding-top: var(--spacing_x8);
`;

const Background = styled(FlexWrapper)`
    position: absolute;
    inset: 0;
    z-index: 1; 
`;

const Content = styled(FlexWrapper)`
    z-index: 3;
    height: auto;
    padding: 0 var(--spacing_x4);
    min-height: unset;
`;

const Header = styled.div`
    display: flex;
    justify-content: space-between;
    width: 100%;
`;

const IconButtonStyled = styled(IconButton)`
    margin-top: var(--spacing_x3);
    align-self: flex-end;
`;



export const Lobby = ({ week }) => {
    const { next, user, newAchieve, setNewAchieve} = useProgress();
    const gameData = user[`game${week}Week`] ?? {};
    const currentLevel = useMemo(() => (
        Object.keys(gameData).map((levelKey) => gameData[levelKey].isCompleted ? levelKey + 1 : +levelKey).sort((a,b) => b - a)[0]
    ), []);

    const handleClickItem = (index) => {
        if (index !== currentLevel) return;

        next(SCREENS[`LEVEL${week}${index}`])
    };


    return (
        <Wrapper>
            <Content>
                <Header>
                    <IconButton onClick={() => next(SCREENS.PROFILE)}>
                        <svg viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M28 29V26.3294C28 25.3528 28 24.8645 27.8874 24.4651C27.604 23.4605 26.8189 22.6754 25.8143 22.3921C25.415 22.2794 24.9266 22.2794 23.95 22.2794H12.05C11.0734 22.2794 10.5851 22.2794 10.1857 22.3921C9.18108 22.6754 8.39596 23.4605 8.11264 24.4651C8 24.8645 8 25.3528 8 26.3294L8 29M23.25 11.9665C23.25 14.7095 20.8995 16.9331 18 16.9331C15.1005 16.9331 12.75 14.7095 12.75 11.9665C12.75 9.22359 15.1005 7 18 7C20.8995 7 23.25 9.22359 23.25 11.9665Z" stroke="white" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                    </IconButton>
                    <IconButton onClick={() => next(SCREENS.ACHIEVES)}>
                        <svg  viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6 14.4118L7.47234 23.2458C7.7384 24.8422 7.87143 25.6403 8.43092 26.1143C8.99041 26.5882 9.79958 26.5882 11.4179 26.5882H24.0669C25.7698 26.5882 26.6213 26.5882 27.1908 26.0785C27.7603 25.5687 27.8544 24.7225 28.0424 23.03L29 14.4118L22.2353 18.4706L17.5 9L12.7647 18.4706L6 14.4118Z" stroke="white" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                    </IconButton>
                </Header>
                <IconButtonStyled onClick={() => next(SCREENS.AWARDS)}>
                    <svg viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.9039 29.5164L10.3014 30.8901L10.9039 29.5164ZM7.65669 26.0784L6.25979 26.6248H6.25979L7.65669 26.0784ZM28.3432 26.0784L29.7402 26.6248L28.3432 26.0784ZM25.0961 29.5164L25.6985 30.8901L25.0961 29.5164ZM7.19997 17.2657L8.69421 17.397L8.76633 16.5766L8.11281 16.0754L7.19997 17.2657ZM27 11.8081V10.3081H27L27 11.8081ZM18.9213 10.4608L19.9876 11.5158L18.9213 10.4608ZM21.4669 7.88805L22.5331 8.94307L21.4669 7.88805ZM25.7095 7.88805L24.6432 8.94307V8.94307L25.7095 7.88805ZM26.0202 11.8081L26.0203 13.3081L26.7905 13.308L27.2393 12.682L26.0202 11.8081ZM17.2669 10.4608L16.2006 11.5158L17.2669 10.4608ZM14.7213 7.88806L13.655 8.94309V8.94309L14.7213 7.88806ZM10.4787 7.88806L11.5449 8.94309V8.94309L10.4787 7.88806ZM18 28.7872H19.5H18ZM7.161 17.2358L6.23464 18.4156H6.23464L7.161 17.2358ZM28.7224 17.3228L27.8541 16.0997L28.7224 17.3228ZM16.2 30V28.5C14.7804 28.5 13.7953 28.4991 13.0251 28.4435C12.2702 28.3889 11.8363 28.2874 11.5063 28.1427L10.9039 29.5164L10.3014 30.8901C11.0741 31.229 11.8904 31.3693 12.809 31.4357C13.7123 31.5009 14.8239 31.5 16.2 31.5V30ZM7.20001 20.4709H5.70001C5.70001 21.9315 5.69927 23.0979 5.76018 24.0433C5.82186 25.0006 5.95122 25.8361 6.25979 26.6248L7.65669 26.0784L9.0536 25.5319C8.90544 25.1531 8.80646 24.665 8.75398 23.8504C8.70072 23.0239 8.70001 21.9703 8.70001 20.4709H7.20001ZM10.9039 29.5164L11.5063 28.1427C10.4165 27.6648 9.52443 26.7354 9.0536 25.5319L7.65669 26.0784L6.25979 26.6248C7.00688 28.5345 8.45092 30.0786 10.3014 30.8901L10.9039 29.5164ZM28.8 20.4709H27.3C27.3 21.9703 27.2992 23.0239 27.246 23.8504C27.1935 24.665 27.0945 25.1531 26.9463 25.5319L28.3432 26.0784L29.7402 26.6248C30.0487 25.8361 30.1781 25.0006 30.2398 24.0433C30.3007 23.0979 30.3 21.9315 30.3 20.4709H28.8ZM19.8 30V31.5C21.1761 31.5 22.2877 31.5009 23.191 31.4357C24.1095 31.3693 24.9258 31.229 25.6985 30.8901L25.0961 29.5164L24.4936 28.1427C24.1637 28.2874 23.7297 28.3889 22.9748 28.4435C22.2047 28.4991 21.2195 28.5 19.8 28.5V30ZM28.3432 26.0784L26.9463 25.5319C26.4755 26.7354 25.5835 27.6648 24.4936 28.1427L25.0961 29.5164L25.6985 30.8901C27.549 30.0786 28.9931 28.5345 29.7402 26.6248L28.3432 26.0784ZM7.20001 20.4709H8.70001C8.70001 18.6124 8.61846 18.2586 8.69421 17.397L7.19997 17.2657L5.70573 17.1343C5.61651 18.1492 5.70001 18.9832 5.70001 20.4709H7.20001ZM27 11.8081V13.3081C27.8134 13.3081 28.5 13.9789 28.5 14.8401H30H31.5C31.5 12.3522 29.5002 10.3081 27 10.3081V11.8081ZM8.99997 11.8081V10.3081C6.49973 10.3081 4.49997 12.3522 4.49997 14.8401H5.99997H7.49997C7.49997 13.9789 8.1865 13.3081 8.99997 13.3081V11.8081ZM18.9213 10.4608L19.9876 11.5158L22.5331 8.94307L21.4669 7.88805L20.4006 6.83303L17.855 9.40575L18.9213 10.4608ZM21.4669 7.88805L22.5331 8.94307C23.1177 8.35231 24.0587 8.35231 24.6432 8.94307L25.7095 7.88805L26.7758 6.83303C25.0172 5.05566 22.1592 5.05566 20.4006 6.83303L21.4669 7.88805ZM18.9213 10.4608L17.855 9.40575C17.4823 9.78245 16.798 10.5 16.5512 11.4193L18 11.8081L19.4487 12.1969C19.4478 12.2002 19.4523 12.1823 19.4737 12.1417C19.495 12.1012 19.5281 12.0475 19.5772 11.9803C19.6787 11.8416 19.8161 11.6891 19.9876 11.5158L18.9213 10.4608ZM25.7095 7.88805L24.6432 8.94307C25.1764 9.48192 25.2325 10.3323 24.801 10.9342L26.0202 11.8081L27.2393 12.682C28.5072 10.9132 28.3562 8.43027 26.7758 6.83303L25.7095 7.88805ZM17.2669 10.4608L18.3332 9.40577L15.7876 6.83304L14.7213 7.88806L13.655 8.94309L16.2006 11.5158L17.2669 10.4608ZM14.7213 7.88806L15.7876 6.83304C14.029 5.05567 11.171 5.05567 9.4124 6.83304L10.4787 7.88806L11.5449 8.94309C12.1295 8.35233 13.0705 8.35233 13.655 8.94309L14.7213 7.88806ZM17.2669 10.4608L16.2006 11.5158C16.3489 11.6657 16.4641 11.8724 16.5512 12.1969L18 11.8081L19.4487 11.4193C19.2709 10.7568 18.9517 10.0309 18.3332 9.40577L17.2669 10.4608ZM10.4787 7.88806L9.4124 6.83304C7.83201 8.43028 7.68097 10.9132 8.94889 12.682L10.168 11.8081L11.3872 10.9342C10.9557 10.3323 11.0118 9.48193 11.5449 8.94309L10.4787 7.88806ZM18 11.8081H16.5L16.5 28.7872H18H19.5L19.5 11.8081L18 11.8081ZM10.168 11.8081L10.168 13.3081L18 13.3081L18 11.8081L18 10.3081L10.168 10.3081L10.168 11.8081ZM8.99997 17.8721V16.3721C8.65609 16.3721 8.34158 16.2556 8.08735 16.056L7.161 17.2358L6.23464 18.4156C6.99622 19.0135 7.9579 19.3721 8.99997 19.3721V17.8721ZM7.161 17.2358L8.08735 16.056C7.73033 15.7757 7.49997 15.3378 7.49997 14.8401H5.99997H4.49997C4.49997 16.2906 5.17875 17.5865 6.23464 18.4156L7.161 17.2358ZM7.19997 17.2657L8.11281 16.0754L8.07384 16.0455L7.161 17.2358L6.24816 18.426L6.28713 18.4559L7.19997 17.2657ZM19.8 30V28.5H18V30V31.5H19.8V30ZM18 30V28.5H16.2V30V31.5H18V30ZM18 28.7872L16.5 28.7872L16.5 30H18L19.5 30L19.5 28.7872H18ZM27 17.8721V16.3721H18V17.8721V19.3721H27V17.8721ZM18 17.8721V16.3721H8.99997V17.8721V19.3721H18V17.8721ZM30 14.8401H28.5C28.5 15.3644 28.244 15.8229 27.8541 16.0997L28.7224 17.3228L29.5908 18.5459C30.7461 17.7257 31.5 16.3691 31.5 14.8401H30ZM28.7224 17.3228L27.8541 16.0997C27.6111 16.2722 27.3186 16.3721 27 16.3721V17.8721V19.3721C27.9633 19.3721 28.8589 19.0655 29.5908 18.5459L28.7224 17.3228ZM28.8 20.4709H30.3C30.3 18.8447 30.3009 18.1759 30.217 17.1949L28.7224 17.3228L27.2279 17.4507C27.299 18.2814 27.3 18.8192 27.3 20.4709H28.8ZM18 11.8081L18 13.3081L25.7095 13.3081L25.7095 11.8081L25.7095 10.3081L18 10.3081L18 11.8081ZM25.7095 11.8081L25.7096 13.3081L26.0203 13.3081L26.0202 11.8081L26.0201 10.3081L25.7094 10.3081L25.7095 11.8081ZM25.7095 11.8081L25.7095 13.3081L27 13.3081L27 11.8081L27 10.3081L25.7095 10.3081L25.7095 11.8081ZM10.168 11.8081V10.3081H8.99997V11.8081V13.3081H10.168V11.8081ZM8.99997 11.8081L8.99997 13.3081L13.5 13.3081L13.5 11.8081L13.5 10.3081L8.99997 10.3081L8.99997 11.8081ZM13.5 11.8081L13.5 13.3081L18 13.3081L18 11.8081L18 10.3081L13.5 10.3081L13.5 11.8081ZM10.168 11.8081L10.168 13.3081L13.5 13.3081L13.5 11.8081L13.5 10.3081L10.168 10.3081L10.168 11.8081ZM18 11.8081L18 13.3081L26.0202 13.3081L26.0202 11.8081L26.0202 10.3081L18 10.3081L18 11.8081Z" fill="white"/>
                    </svg>
                </IconButtonStyled>

                <button onClick={() => handleClickItem(3)}>3{currentLevel < 3 && 'closed' || currentLevel > 3 && 'pasted'}</button>
                <button onClick={() => handleClickItem(2)}>2{currentLevel < 2 && 'closed' || currentLevel > 2 && 'pasted'}</button>
                <button onClick={() => handleClickItem(1)}>1{currentLevel > 1 && 'pasted'}</button>
            </Content>
         
            <NewAchieveModal isOpen={newAchieve.length > 0} achieveId={newAchieve[0]} onClose={() => {setNewAchieve(prev => prev.slice(1))}}/>
            <Background />
        </Wrapper>
    )
}