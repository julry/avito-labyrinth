import styled from "styled-components";

import { FlexWrapper } from "../ContentWrapper";
import { useGame } from "./useGame";
import { GameController } from "./GameController";
import { AnimatePresence, motion } from "framer-motion";
import { useSizeRatio } from "../../../hooks/useSizeRatio";
import { BackHeader } from "../BackHeader";
import { useState } from "react";
import { Modal, NewAchieveModal, SkipModal } from "../modals";
import { useProgress } from "../../../contexts/ProgressContext";
import { SCREENS } from "../../../constants/screens";

import week1GameBg from '../../../assets/images/week1GameBg.svg';
import week2GameBg from '../../../assets/images/week2GameBg.svg';
import week3GameBg from '../../../assets/images/week3GameBg.svg';
import { Block } from "../Block";
import { RedStroke1Line, RedStroke2Line } from "../RedStrokes";
import { Button } from "../Button";

//TODO: добавить 4

const WEEK_TO_BG = {
    1: week1GameBg,
    2: week2GameBg,
    3: week3GameBg,
};

const Wrapper = styled(FlexWrapper)`
    background-color: var(--color-purple);
    background-image: url(${({ $bg }) => $bg});
    background-size: cover;
    background-repeat: no-repeat;
`;

const WrapperInner = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    width: ${({ $boardSize }) => $boardSize.width}px;
    height: ${({ $boardSize }) => $boardSize.height}px;
    margin-top: calc( var(--spacing_x7) + var(--spacing_x4) + 4 * var(--spacing_x3));
`;

const Field = styled(FlexWrapper)`
    position: relative;
    border-radius: 20px;
    width: 100%;
    height: 100%;
`;

const BoardBg = styled.div`
    position: absolute;
    left: 50%;
    top:  50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    z-index: 1;
`;

const Row = styled.div`
    display: flex;
    position: relative;
    z-index: 6;
    text-align: center;
`;

const Cell = styled.div`
    position: relative;
    z-index: 3;
    width: ${({ $cellWidth }) => $cellWidth}px;
    height: ${({ $cellHeight }) => $cellHeight}px;
    font-size: 7px;
`;

const Player = styled(motion.div)`
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: ${({ $top }) => $top}px;
    left: ${({ $left }) => $left}px;
    width: ${({ $cellWidth }) => $cellWidth}px;
    height: ${({ $cellHeight }) => $cellHeight}px;
    transition: transform 100ms;
    z-index: 13;

    & svg {
        width: 80%;
        height: 80%;
    }
`;

const ActiveCell = styled(motion.div)`
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    top: ${({ $top }) => $top}px;
    left: ${({ $left }) => $left}px;
    width: ${({ $cellWidth }) => $cellWidth}px;
    height: ${({ $cellHeight }) => $cellHeight}px;
    z-index: 12;
`;

const TextModal = styled.p`
    font-size: var(--font_sm);
`;

const ButtonModal = styled(Button)`
    margin-top: var(--spacing_x4);
`;

const EducativeSvg = styled(motion.div)`
    position: absolute;
    bottom: ${({ $ratio }) => $ratio * 60}px;
    width: ${({ $ratio }) => $ratio * 92}px;
    height: ${({ $ratio }) => $ratio * 148}px;
    left: ${({ $ratio }) => $ratio * 162}px;
    transform: translateX(-50%);
    z-index: 20;
`;

const LineSvg = styled.div`
    position: absolute;
    z-index: 20;
    bottom: ${({ $ratio }) => $ratio * 200}px;
    left: ${({ $ratio }) => $ratio * 132}px;
    width: ${({ $ratio }) => $ratio * 125}px;
    height: ${({ $ratio }) => $ratio * 113}px;
`;

export function LabyrinthGame({
    isFirst,
    week,
    boardSize,
    boardSvg,
    finalPosition = { x: 1, y: 10 },
    initialPosition = { x: 6, y: 6 },
    maze,
    cellHeight,
    cellWidth,
    finalSvg,
    level,
    achieve,
    stars = []
}) {
    const ratio = useSizeRatio();
    const { next, endGame, newAchieve, setNewAchieve } = useProgress();
    const [isSkipping, setIsSkipping] = useState(false);
    const [isEducative, setIsEducative] = useState(isFirst)
    const [isFirstModal, setIsFirstModal] = useState(isFirst);

    const handleEndGame = () => {
        next();
        endGame({ week, level, achieve });
    }

    const { movePlayer, playerPosition, isFinishShown, shownStars } = useGame({ 
        finalPosition, initialPosition, maze, onEndGame: handleEndGame, stars 
    });

    const handleMove = (dir) => {
        if (isEducative) setIsEducative(false);

        movePlayer(dir);
    }

    return (
        <>
            <Wrapper $bg={`${WEEK_TO_BG[week]}`}>
                <BackHeader onBack={() => setIsSkipping(true)} />
                <GameController
                    active={!isSkipping && !isFirstModal}
                    onMoveUp={() => handleMove('up')}
                    onMoveDown={() => handleMove('down')}
                    onMoveLeft={() => handleMove('left')}
                    onMoveRight={() => handleMove('right')}
                >
                    {(ref) => (
                        <WrapperInner ref={ref} $ratio={ratio} $boardSize={boardSize}>
                            <Field $ratio={ratio}>
                                <BoardBg $ratio={ratio}>
                                    {boardSvg}
                                </BoardBg>
                                {maze.map((row, y) => (
                                    <Row key={y}>
                                        {row.map((cell, x) => (
                                            <Cell
                                                key={`${x}-${y}`}
                                                $ratio={ratio}
                                                $cellHeight={cellHeight}
                                                $cellWidth={cellWidth}
                                                $isBottom={cell.includes?.('b')}
                                                $isRight={cell.includes?.('r')}
                                            >
                                                {/* {cell} */}
                                            </Cell>
                                        )
                                        )}
                                    </Row>
                                ))}
                                <Player
                                    $ratio={ratio}
                                    $top={initialPosition.y * cellHeight}
                                    $left={initialPosition.x * cellWidth}
                                    $cellHeight={cellHeight}
                                    $cellWidth={cellWidth}
                                    style={{ transform: `translate(${(playerPosition.x - initialPosition.x) * cellWidth}px, ${(playerPosition.y - initialPosition.y) * cellHeight}px)` }}
                                >
                                    <svg viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <ellipse cx="14.022" cy="13.6879" rx="11.8531" ry="11.5045" fill="white" />
                                        <path d="M7.32661 24.4751C7.26698 24.4204 7.15251 24.4252 7.09288 24.3704C7.02118 24.0296 6.78746 23.9249 6.50375 23.9942C6.47721 23.365 6.07904 23.4391 5.67847 23.456C5.5592 23.3465 5.49956 23.2917 5.38029 23.1821C5.36823 22.8961 5.24414 22.6722 4.89838 22.6295C4.59296 22.184 4.06347 21.8625 3.81286 21.3574C4.09175 21.1738 4.311 20.9354 4.07245 20.7162C3.53331 20.166 4.10313 20.0847 4.37961 19.8439C4.65608 19.603 4.9567 19.9341 5.29763 19.8624C5.73197 20.6462 6.55483 21.1272 7.20842 21.6726C9.34569 23.416 11.7329 24.2893 14.4821 24.2307C15.3977 24.192 16.4374 24.3774 17.2764 23.8836C18.5612 23.0846 20.0298 22.5643 21.1881 21.4841C23.6715 19.2021 24.8719 16.4013 24.732 13.084C24.5728 9.30924 22.5638 6.52922 19.3844 4.54336C18.6785 4.11477 18.0893 3.73856 18.0507 2.82346C19.2211 2.02925 20.3156 2.15498 21.5535 2.96221C24.616 4.8957 26.4509 7.62578 27.1727 11.1477C27.9662 15.0103 27.0236 18.4878 24.6288 21.5109C23.3777 23.1107 21.6496 24.2721 19.7329 25.0405C17.647 25.8733 15.5369 26.1342 13.36 26.1687C12.7732 25.8497 12.1769 25.3019 11.3999 25.9076C11.2258 25.8577 11.0541 25.8649 10.8228 25.8174C10.3981 25.2623 9.871 24.9981 9.18671 25.0842C8.95782 25.0939 8.78616 25.1011 8.55967 25.1679C8.35905 24.4889 7.89886 24.451 7.32661 24.4751Z" fill="#FF4052" />
                                        <path d="M1.19945 16.483C0.346985 13.9406 0.64386 11.4644 1.51537 9.0212C2.23692 7.10001 3.42831 5.44546 4.92031 4.12203C6.02621 3.15866 7.24894 2.24766 8.78436 1.95372C9.6379 1.80313 10.365 1.37143 11.2161 1.16364C13.0876 0.683647 14.8236 1.06881 16.6169 1.45155C17.368 1.59176 17.7903 2.0896 17.8813 2.8879C16.2194 2.90069 14.4954 2.80149 12.8383 2.92867C9.75543 3.23057 7.29786 4.76662 5.39389 7.19604C4.57894 8.26173 4.11216 9.42736 3.53093 10.5978C2.63464 11.094 2.64189 11.2655 3.34788 11.6941C3.41717 11.9776 3.37199 12.266 3.15515 12.5616C2.88833 13.0313 2.3902 13.4533 3.04137 13.9415C3.22752 14.2775 3.30162 14.6754 3.14441 15.0258C2.56976 14.9928 2.35532 15.3456 2.20053 15.7532C2.16743 16.3275 1.7741 16.516 1.19945 16.483Z" fill="#FF4052" />
                                        <path d="M1.19979 16.4829C1.71722 16.5184 2.11055 16.3299 2.31533 15.7483C2.46771 15.2835 2.68214 14.9307 3.25921 15.0209C3.78937 16.7174 4.48636 18.2923 5.24059 19.8648C4.95688 19.9341 4.59908 19.6054 4.3226 19.8462C4.10094 20.0275 3.47631 20.1684 4.01545 20.7186C4.254 20.9377 3.97993 21.2358 3.75586 21.3598C2.88302 21.0528 2.61551 20.1474 2.18599 19.4779C1.57756 18.6442 1.1908 17.6292 1.19979 16.4829Z" fill="#FF4052" />
                                        <path d="M11.23 25.972C11.9498 25.3687 12.5462 25.9165 13.1901 26.2331C12.5179 26.6053 11.8739 26.2886 11.23 25.972Z" fill="#FF4052" />
                                        <path d="M9.07257 25.0891C9.75685 25.0029 10.2839 25.2672 10.7086 25.8222C10.0767 25.7916 9.44486 25.7609 9.07257 25.0891Z" fill="#FF4052" />
                                        <path d="M7.32671 24.4751C7.89655 24.3937 8.35917 24.4888 8.50256 25.1703C7.93031 25.1944 7.57491 24.923 7.32671 24.4751Z" fill="#FF4052" />
                                        <path d="M5.62109 23.4585C6.02167 23.4416 6.47948 23.4223 6.44637 23.9966C6.10061 23.9539 5.75484 23.9112 5.62109 23.4585Z" fill="#FF4052" />
                                        <path d="M6.44688 23.9966C6.78782 23.9249 6.96431 24.032 7.03601 24.3728C6.69749 24.5017 6.51858 24.3373 6.44688 23.9966Z" fill="#FF4052" />
                                        <path d="M4.84375 22.689C5.18951 22.7317 5.31119 22.8985 5.32566 23.2417C5.03712 23.1965 4.85581 22.975 4.84375 22.689Z" fill="#FF4052" />
                                        <path d="M3.64515 10.5929C3.66203 10.9932 3.73613 11.3911 3.46206 11.6892C2.75607 11.2606 2.74885 11.089 3.64515 10.5929Z" fill="#FF4052" />
                                        <path d="M3.26974 12.5568C3.51793 13.0047 3.25111 13.4743 3.15596 13.9367C2.50478 13.4485 3.00291 13.0264 3.26974 12.5568Z" fill="#FF4052" />
                                        <path d="M12.8889 19.084C13.6684 18.5354 13.4105 17.8588 13.5605 17.3368C13.7128 16.872 13.7484 16.3548 14.3206 16.3306C14.9501 16.3041 15.582 16.3348 16.1163 16.7706C16.2355 16.8801 16.3024 17.1065 16.3097 17.2781C16.079 18.6056 15.8508 19.9903 15.0382 21.1132C14.6046 21.7045 14.1564 21.9525 13.2932 21.8743C11.2163 21.5609 10.8608 21.2894 10.4879 19.2425C10.4017 18.5586 10.0891 17.9415 10.1173 17.2528C10.1456 16.564 10.4197 16.266 11.104 16.1798C11.5618 16.1605 11.8527 16.2628 11.9889 16.7727C12.1895 17.4518 12.5642 18.1809 12.8889 19.084Z" fill="#FF4052" />
                                        <path d="M19.5059 14.2213C18.4186 14.2671 17.9391 13.7717 17.8908 12.6278C17.8498 11.6555 18.6293 11.107 20.1743 11.0418C21.0899 11.0032 21.7459 11.6057 21.7273 12.5233C21.6539 13.5004 20.8244 14.2229 19.5059 14.2213Z" fill="#FF4052" />
                                        <path d="M6.86925 10.9153C7.66557 10.7671 8.36433 11.0242 8.91553 11.8604C9.283 12.4178 9.07099 12.8278 8.80175 13.2403C8.53493 13.7099 6.71821 14.1303 6.25077 13.9208C5.66888 13.7162 5.28935 12.8727 5.30798 11.9552C5.44347 11.0901 5.61031 10.9684 6.86925 10.9153Z" fill="#FF4052" />
                                    </svg>
                                </Player>
                                <AnimatePresence>
                                    {
                                    isFinishShown && (
                                        <ActiveCell
                                            initial={stars.length > 0 ? {opacity: 0}: {}}
                                            animate={{opacity: 1}}
                                            $ratio={ratio}
                                            $top={finalPosition.y * cellHeight}
                                            $left={finalPosition.x * cellWidth}
                                            $cellHeight={cellHeight}
                                            $cellWidth={cellWidth}
                                        >
                                            {finalSvg}
                                        </ActiveCell>
                                    )
                                }
                                {
                                    shownStars.map((star) => (
                                        <ActiveCell
                                            $ratio={ratio}
                                            exit={{opacity: 0}}
                                            $top={star.y * cellHeight}
                                            $left={star.x * cellWidth}
                                            $cellHeight={cellHeight}
                                            $cellWidth={cellWidth}
                                            key={`star_x_${star.x}_y_${star.y}`}
                                        >
                                            <svg width="80%" height="80%" viewBox="0 0 27 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M10.5834 8.61924C10.5498 8.40163 10.4553 8.19341 10.682 8.04703C11.4396 7.70729 11.4396 7.70729 11.9665 8.29436C12.2036 7.81217 12.0755 7.38633 12.1301 6.93232C12.1511 6.26069 13.0788 6.61881 13.3159 6.13662C12.5184 5.81412 12.5183 5.81411 11.8824 6.13506C11.5949 6.29084 11.448 6.14643 11.3011 6.00201C11.2759 5.8388 11.3199 5.72061 11.2948 5.5574C11.5382 5.51982 11.7817 5.48225 11.7397 5.21023C11.7145 5.04703 11.4627 5.03019 11.2717 5.00397C11.1604 4.68695 11.3094 4.44114 11.4584 4.19535C12.5813 3.79925 12.5728 3.74484 12.5959 2.683C13.3451 2.28886 14.0902 2.67515 14.8899 2.60743C15.7714 3.47396 15.8344 4.68961 16.2458 5.74009C16.7936 7.27081 17.2197 8.82033 17.6458 10.3698C17.9019 11.2215 17.9019 11.2215 18.9534 11.1706C20.6219 11.0802 22.2569 10.7721 23.8897 10.8543C24.767 10.886 25.0692 11.2292 24.8825 12.0378C24.7586 12.4469 24.5656 12.8109 24.234 13.0848C22.96 14.1169 21.6945 15.2034 20.3513 16.1905C19.6797 16.6841 19.4426 17.1663 19.621 17.9186C20.0555 19.5225 20.3074 21.1546 20.9245 22.7303C20.9413 22.8391 20.9665 23.0023 20.9833 23.1111C21.0756 23.7095 21.2981 24.3436 20.6958 24.8821C20.2508 25.2293 18.6432 25.3103 18.0282 24.9596C16.9368 24.3483 15.8014 23.8552 14.964 22.8705C13.9019 21.6419 13.224 21.6908 11.9753 22.8862C11.4338 23.4153 10.8231 23.8995 10.3425 24.4192C9.15459 25.6052 8.79782 25.7159 6.99285 25.3261C6.90889 24.7821 7.02432 24.3187 7.32233 23.8271C7.95403 22.6713 7.76089 21.42 8.07147 20.2024C8.09875 19.9754 8.06515 19.7578 8.15329 19.5214C8.79548 18.0298 7.94757 17.3809 6.70926 16.6251C5.47096 15.8694 3.9535 15.3238 3.13494 14.0577C2.97962 13.8589 2.58928 13.752 2.32063 13.6264C2.08134 12.8835 2.11069 12.2663 3.04254 11.844C3.21674 11.7614 3.31326 11.5794 3.47906 11.4424C3.77499 11.341 4.07931 11.2941 4.40882 11.4103C5.34489 11.8228 6.28305 11.8451 7.23169 11.5316C7.96206 11.4189 8.7617 11.3512 9.52566 11.456C9.60332 11.5554 9.63691 11.773 9.69778 11.7637C9.94123 11.7261 9.78591 11.5273 9.82998 11.4091C9.94332 11.3359 9.98738 11.2177 10.1007 11.1445C10.7702 11.0411 10.426 10.4259 10.7051 10.2157C11.4208 9.60395 11.1018 9.15191 10.5834 8.61924Z" fill="#FF4053"/>
                                                <path d="M12.5964 2.68277C12.5734 3.74461 12.521 3.80841 11.459 4.19512C11.4716 3.46909 11.6059 2.72429 12.0697 2.09571C12.2187 1.84992 12.4201 1.54031 12.7496 1.65655C13.5304 1.87024 14.5042 1.71993 14.8904 2.6072C14.0908 2.67492 13.3457 2.28863 12.5964 2.68277C12.5188 2.58335 12.4496 2.53835 12.4664 2.64716L12.5964 2.68277Z" fill="#FF4053"/>
                                                <path d="M11.2401 6.01099C11.387 6.15541 11.534 6.29981 11.8215 6.14404C12.4574 5.82309 12.4574 5.8231 13.255 6.1456C13.0871 6.6728 12.0901 6.26967 12.0692 6.94129C12.0755 7.38591 12.151 7.87556 11.9055 8.30335C11.3787 7.71627 11.3787 7.71627 10.621 8.05601C10.7637 7.3656 10.5853 6.61335 11.2401 6.01099Z" fill="#FF4053"/>
                                                <path d="M3.47906 11.4423C3.37413 11.5699 3.21674 11.7613 3.04254 11.8439C2.17156 12.2568 2.08974 12.9378 2.32063 13.6263C1.67 13.4482 1.57763 12.8498 1.38872 12.4333C1.19142 11.9625 1.55028 11.4615 2.08966 11.3226C2.50731 11.2024 3.03831 11.009 3.47906 11.4423Z" fill="#FF4053"/>
                                                <path d="M10.5839 8.6189C11.0939 9.09718 11.4821 9.59423 10.6363 10.1704C10.3572 10.3805 10.7015 10.9958 10.032 11.0991C10.1579 10.2999 10.0235 9.42948 10.5839 8.6189Z" fill="#FF4053"/>
                                                <path d="M7.2213 11.4768C6.27266 11.7903 5.27364 11.7774 4.39844 11.3555C5.494 11.1864 6.49302 11.1993 7.2213 11.4768Z" fill="#FF4053"/>
                                                <path d="M11.2796 5.05828C11.4622 5.0301 11.6532 5.05632 11.7476 5.26454C11.7896 5.53655 11.4853 5.58352 11.3027 5.61171C11.2691 5.39409 11.244 5.23088 11.2796 5.05828Z" fill="#FF4053"/>
                                                <path d="M9.76038 11.3637C9.71631 11.4819 9.87159 11.6807 9.62813 11.7183C9.56727 11.7277 9.53371 11.5101 9.45605 11.4107C9.57778 11.3919 9.63865 11.3825 9.76038 11.3637Z" fill="#FF4053"/>
                                                <path d="M12.5973 2.68339C12.5361 2.69284 12.4665 2.64757 12.4665 2.64757C12.5193 2.5834 12.5192 2.58339 12.5973 2.68339Z" fill="#FF4053"/>
                                            </svg>
                                        </ActiveCell>
                                    ))
                                }
                                </AnimatePresence>
                            </Field>
                            {!isFirstModal && isEducative && (
                                <>
                                    <LineSvg $ratio={ratio}>
                                        <svg width="100%" height="100%" viewBox="0 0 125 113" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M120.276 38.3002C121.307 39.4602 122.018 41.0004 121.756 42.6859C121.494 44.3653 120.363 45.5688 119.006 46.2616C113.132 49.6989 107.465 53.0248 102.505 57.0925L102.504 57.0904C100.688 58.6661 98.6069 59.0419 96.6207 58.388C94.8533 57.8061 93.4143 56.4932 92.3479 55.2942C90.8496 53.6094 90.0642 51.6132 90.8315 49.5084C91.3041 48.2125 92.2793 47.219 93.1865 46.4782C91.7569 46.4079 90.2842 46.4585 88.7561 46.5723C86.1061 46.7696 82.7969 47.2166 79.9119 47.3389C73.3336 48.4489 66.2681 49.8979 62.3523 50.3572C61.7172 50.4317 60.0176 50.9208 57.4365 51.8408C54.9659 52.7215 51.938 53.9034 48.8069 55.2029C42.4955 57.8225 35.9766 60.8337 32.792 62.7573C29.4936 64.7497 25.1623 67.6747 21.2628 70.2756C19.3305 71.5644 17.5038 72.7744 15.9975 73.7233C14.5778 74.6177 13.2064 75.4357 12.2989 75.779C10.5206 76.4519 8.91774 76.4324 7.47071 75.9093C6.17028 75.4391 5.13571 74.5939 4.47459 74.0716C3.60629 73.3854 3.28748 72.4349 3.23532 71.6451C3.18675 70.909 3.35274 70.2178 3.54564 69.6649C3.93544 68.5477 4.66817 67.344 5.55492 66.1711C7.35878 63.7852 10.1928 61.0129 13.694 58.5339C20.5634 53.6701 40.5351 43.467 53.3039 39.1002C58.6311 37.2784 66.4318 36.119 73.8444 35.3911C81.3147 34.6576 88.621 34.3422 93.0868 34.2767L93.1782 34.2752L93.2706 34.2806C93.7876 34.311 94.3941 34.285 95.0377 34.225C94.832 34.0167 94.5733 33.7541 94.3717 33.5274C93.901 32.9983 93.3202 32.4984 92.6095 31.9385C91.9618 31.4282 91.068 30.7655 90.31 30.1243L90.2796 30.099L90.2514 30.0732C89.2979 29.2142 88.1392 28.0175 87.5952 26.4812C86.9637 24.697 87.2829 22.8425 88.5545 21.1572L88.5814 21.1228C89.2607 20.2546 90.1348 19.533 91.2559 19.2264C92.3877 18.9168 93.4137 19.1277 94.1963 19.4407C94.9425 19.7393 95.5951 20.1823 96.077 20.5296C96.6806 20.9647 96.9313 21.1769 97.3797 21.483L97.4215 21.5125L97.4626 21.5425C103.749 26.2228 110.053 30.5268 116.603 35.0776L116.644 35.1056L116.683 35.1348C117.782 35.9643 119.214 37.1069 120.276 38.3002Z" fill="white" stroke="#FF4053" strokeWidth="5" />
                                            <path d="M52.2356 77.7928C52.8106 77.638 53.3856 77.4831 53.7616 77.5052C53.5627 77.6822 52.8106 77.638 52.2356 77.7928Z" fill="#FF4053" />
                                        </svg>
                                    </LineSvg>
                                    <EducativeSvg $ratio={ratio}
                                        animate={{ x: 50 * ratio, y: -10 * ratio }}
                                        transition={{ repeat: Infinity, duration: 0.8 }}
                                    >
                                        <svg width="100%" height="100%" viewBox="0 0 92 148" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M76.0794 26.0596C71.4223 24.2699 66.3061 26.5038 64.728 30.9649C63.8724 28.7526 62.7458 26.6652 61.0935 25.1492C55.8525 20.3394 50.4475 24.6452 47.9106 29.7405C47.0389 27.6938 45.8823 25.8044 44.0738 24.4408C39.1413 20.7222 35.0423 23.6198 32.8091 27.9027C31.4431 21.8311 29.8065 15.878 27.5285 10.3284C25.1862 4.62571 19.6134 -2.40961 13.1229 3.10511C5.62724 9.47244 12.3908 26.3039 13.8618 33.6642C16.4831 46.7757 18.0157 61.6873 22.3611 74.7229C18.8632 70.4381 13.6256 67.3806 8.00777 68.6221C1.56607 70.0448 -0.347509 76.5151 2.04023 82.1464C3.74703 86.1719 7.10497 88.7967 10.2916 91.6003C15.7198 96.3766 21.0969 101.083 25.8822 106.519C35.5229 117.47 42.1808 130.251 43.6451 144.885C43.7707 146.136 45.0964 146.652 46.1583 146.577C60.6223 145.56 74.7514 143.301 88.8095 139.735C90.5349 139.298 90.8133 137.397 90.0758 136.269C90.0723 136.123 90.06 135.972 90.0258 135.813C86.7057 120.101 83.346 104.17 83.9564 88.0162C84.4427 75.1052 87.3081 62.2886 86.5096 49.3349C86.0441 41.7953 84.4901 29.2923 76.0794 26.0596ZM82.3028 55.3829C82.0537 64.7261 80.3135 73.9544 79.6059 83.2621C78.2481 101.124 81.719 118.712 85.4058 136.1C72.9626 139.047 60.3543 141.078 47.6113 142.171C45.8283 129.065 39.9807 117.224 31.6122 106.979C27.423 101.852 22.6912 97.2329 17.6907 92.9027C14.823 90.4196 10.804 88.1536 8.48212 85.1623C-3.07349 68.561 15.4639 72.0553 17.7845 74.1126C20.324 75.2678 23.0558 79.1977 24.4031 81.2952C24.5937 81.5907 24.8653 81.7017 25.1219 81.6875C25.4378 81.9929 26.094 81.8569 26.0842 81.351C25.8778 71.6516 22.697 61.7616 20.6756 52.3044C18.4015 41.6575 16.1353 31.0029 14.0818 20.3099C13.7317 18.4863 13.2879 16.6466 13.0558 14.8031C11.6834 -1.04757 22.6009 5.3637 23.6219 9.27787C25.7675 13.5816 26.6043 18.616 27.6537 23.2668C30.032 33.7995 32.3878 44.3366 34.7542 54.8717C35.2366 57.0209 38.6091 56.3698 38.1191 54.2142C36.4436 46.8469 35.1626 39.0277 33.5528 31.3164C35.4922 27.4972 38.1111 22.6702 43.8195 29.1603C45.4404 31.0028 45.7691 34.5804 46.4228 36.9181C47.879 42.1237 49.1416 47.378 50.3012 52.6572C50.8265 55.0496 54.5695 54.3276 54.0424 51.9261C52.8043 46.2936 51.4073 40.6952 49.7436 35.1709C49.4946 34.3446 49.2425 33.4939 48.9732 32.6435C51.1325 29.0781 54.2401 23.5135 60.0514 29.443C61.6087 31.0323 62.0171 34.5053 62.5679 36.6365C63.8419 41.5574 63.6587 46.7209 65.0065 51.5477C65.3392 52.7388 67.2983 53.1856 67.667 51.7386C68.8658 47.0236 67.7432 41.5263 66.5341 36.8895C66.4149 36.4316 67.3794 34.6027 68.4324 32.7955C70.7235 28.8653 76.6553 28.9749 78.489 33.1381C78.5024 33.1667 78.5146 33.1971 78.5265 33.226C79.8807 35.3034 80.4796 37.7127 81.0507 40.0993C82.2375 45.0857 82.4376 50.2758 82.3028 55.3829Z" fill="#FF4052" />
                                            <path d="M82.3028 55.3829C82.0537 64.7261 80.3135 73.9544 79.6059 83.2621C78.2481 101.124 81.719 118.712 85.4058 136.1C72.9626 139.047 60.3543 141.078 47.6113 142.171C45.8283 129.065 39.9807 117.224 31.6122 106.979C27.423 101.852 22.6912 97.2329 17.6907 92.9027C14.823 90.4196 10.804 88.1536 8.48212 85.1623C-3.07349 68.561 15.4639 72.0553 17.7845 74.1126C20.324 75.2678 23.0558 79.1977 24.4031 81.2952C24.5937 81.5907 24.8653 81.7017 25.1219 81.6875C25.4378 81.9929 26.094 81.8569 26.0842 81.351C25.8778 71.6516 22.697 61.7616 20.6756 52.3044C18.4015 41.6575 16.1353 31.0029 14.0818 20.3099C13.7317 18.4863 13.2879 16.6466 13.0558 14.8031C11.6834 -1.04757 22.6009 5.3637 23.6219 9.27787C25.7675 13.5816 26.6043 18.616 27.6537 23.2668C30.032 33.7995 32.3878 44.3366 34.7542 54.8717C35.2366 57.0209 38.6091 56.3698 38.1191 54.2142C36.4436 46.8469 35.1626 39.0277 33.5528 31.3164C35.4922 27.4972 38.1111 22.6702 43.8195 29.1603C45.4404 31.0028 45.7691 34.5804 46.4228 36.9181C47.879 42.1237 49.1416 47.378 50.3012 52.6572C50.8265 55.0496 54.5695 54.3276 54.0424 51.9261C52.8043 46.2936 51.4073 40.6952 49.7436 35.1709C49.4946 34.3446 49.2425 33.4939 48.9732 32.6435C51.1325 29.0781 54.2401 23.5135 60.0514 29.443C61.6087 31.0323 62.0171 34.5053 62.5679 36.6365C63.8419 41.5574 63.6587 46.7209 65.0065 51.5477C65.3392 52.7388 67.2983 53.1856 67.667 51.7386C68.8658 47.0236 67.7432 41.5263 66.5341 36.8895C66.4149 36.4316 67.3794 34.6027 68.4324 32.7955C70.7235 28.8653 76.6553 28.9749 78.489 33.1381C78.5024 33.1667 78.5146 33.1971 78.5265 33.226C79.8807 35.3034 80.4796 37.7127 81.0507 40.0993C82.2375 45.0857 82.4376 50.2758 82.3028 55.3829Z" fill="white" />
                                            <path d="M1.58018 82.3412C0.342936 79.4232 0.208008 76.2613 1.2478 73.6231C2.29382 70.9693 4.5164 68.8815 7.89971 68.1342C12.9732 67.013 17.7005 69.2546 21.1904 72.6974C17.3552 60.1564 15.8351 46.0845 13.3716 33.7623C13.008 31.9429 12.3174 29.538 11.5889 26.8081C10.8642 24.0926 10.1088 21.0789 9.63566 18.0902C9.16308 15.105 8.96717 12.1165 9.37531 9.45546C9.7842 6.78965 10.806 4.41691 12.7993 2.7237C14.4908 1.28651 16.1637 0.634834 17.7735 0.605476C19.3791 0.576198 20.8602 1.16738 22.1716 2.10331C24.7778 3.96332 26.8033 7.24568 27.9914 10.1383C30.1289 15.3455 31.6971 20.8991 33.0096 26.5569C34.1005 24.8432 35.5273 23.4168 37.2378 22.7088C39.3475 21.8355 41.7909 22.0935 44.3749 24.0416C45.9956 25.2637 47.1046 26.8775 47.9474 28.6162C49.2457 26.3569 51.1001 24.3188 53.2717 23.2793C54.5086 22.6872 55.8561 22.4163 57.2537 22.6266C58.6516 22.8369 60.0612 23.5226 61.4318 24.7803C62.8815 26.1105 63.9292 27.8459 64.7413 29.6899C66.8175 25.7 71.7578 23.8635 76.2583 25.5927L76.2592 25.5926C80.6703 27.2881 83.2318 31.3951 84.7484 35.9229C86.2681 40.4597 86.7755 45.5248 87.0089 49.3042C87.4108 55.8246 86.8901 62.3016 86.2123 68.7435C85.5756 74.794 84.8021 80.8008 84.5083 86.8288L84.4564 88.035C83.8487 104.116 87.1919 119.987 90.5142 135.709L90.515 135.708L90.5144 135.71L90.5146 135.711C90.545 135.854 90.5584 135.988 90.5664 136.114C90.9572 136.785 91.0664 137.637 90.8468 138.4C90.608 139.229 89.9793 139.954 88.9328 140.219C74.8456 143.792 60.687 146.057 46.1937 147.076C45.5784 147.119 44.8796 146.994 44.3017 146.662C43.7484 146.343 43.2904 145.822 43.1678 145.085L43.1474 144.935L43.0755 144.256C41.4887 130.032 34.9453 117.572 25.5067 106.85C20.7461 101.442 15.3942 96.7559 9.96121 91.9753C6.81235 89.205 3.34205 86.4966 1.58018 82.3412Z" stroke="#FF4053" />
                                        </svg>

                                    </EducativeSvg>
                                </>
                            )}
                        </WrapperInner>
                    )}

                </GameController>
            </Wrapper>
            <SkipModal isOpen={isSkipping} onClose={() => setIsSkipping(false)} onExit={() => next(SCREENS[`LOBBY${week}`])} />
            <Modal isOpen={isFirstModal}>
                <Block>
                    <RedStroke2Line>
                        Не спеши: осмотрись и продумай свои шаги
                    </RedStroke2Line>
                    <TextModal>Лабиринт может оказаться непростым. Это твое путешествие, и главное — двигаться в своем темпе. Удачи!</TextModal>
                </Block>
                <ButtonModal onClick={() => setIsFirstModal(false)}>Начать путешествие</ButtonModal>
            </Modal>
            <NewAchieveModal isOpen={newAchieve !== undefined} achieveId={newAchieve} onClose={() => { setNewAchieve() }} />
        </>
    )
}